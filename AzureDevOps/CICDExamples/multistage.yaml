resources:
  containers:
  - container: geobotagent
    image: h2floh/geobotagent

# CI trigger
trigger:
  branches:
    include:
    - master
  paths:
    include:
    - Deploy
    - GeoBot/GeoBot
    - AzureDevOps/CICDExamples/multistage.yaml

# PR builds
# pr:
#   branches:
#     include:
#     - master
#   paths:
#     include:
#     - Deploy
#     - AzureDevOps/CICDExamples/multistage.yaml

# No need for schedules
#schedules:

variables:
# This group must include following variables: 
# - ServicePrincipalID (Client/App ID)
# - ServicePrincipalSecret (Client Secret)
# - TenantId (AAD Id)
# - SubscriptionId (Azure Subscription)
- group: SubscriptionDetails
# This group must include following variables: 
# - TFStateRG (Resource Group for Terraform state)
# - TFStateStA (Terraform state store storage account)
# - TFStateLoc (Terraform state store storage account and resource group location)
- group: StateStore

stages:
- stage: IaC
  displayName: 'Updating Infrastructure' 
  #dependsOn: string | [ string ]
  #condition: string
  variables:
  # This group must include following variables: 
  # - BotName (Name of the Bot)
  # - Domain (Custom Domain name for the Bot)
  # - BotRegions (Azure Regions for the Bot PowerShell Array format)
  # - BotGlobalLocation (Azure Regions for global resources)
  # - PFXImportPassword (PFX file import password for SSL Bot Certificate)
  - group: BotConfig

  jobs:
  - deployment: IaC
    displayName: 'Updating Infrastructure'
    pool:
      name: Default
      demands:
      - docker
    container: geobotagent
    environment: Prod
    strategy: 
      runOnce:
        deploy:
          steps:
          - checkout: self
          # The file names sslcert.pfx has to be provided as a secure file in Azure DevOps
          - task: DownloadSecureFile@1
            name: sslCertificate
            displayName: 'Download SSL certificate for bot'
            inputs:
              secureFile: 'sslcert.pfx'

          - pwsh: |
              # Azure Login
              az login --service-principal --username $(ServicePrincipalID) --password $(ServicePrincipalSecret) --tenant $(TenantId)
              
              # Terraform
              Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID]$(ServicePrincipalID)"
              Write-Host "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$(ServicePrincipalSecret)"
              Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(SubscriptionId)"
              Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID]$(TenantId)"
            displayName: 'Prepare Azure connection for CLI & Terraform'

          - pwsh: |
              # Initialize Terraform Folders
              
              Deploy/InitTerraform.ps1 -STORAGE_ACCOUNT_NAME $(TFStateStA) -RESOURCE_GROUP_NAME $(TFStateRG) -LOCATION $(TFStateLoc) -TERRAFORM_FOLDERS @("IaC", "SSLActivation")
              
              # $Lastexitcode $True -> Success, we have to change it to 0
              exit -not $LASTEXITCODE
            displayName: 'Init Terraform Folders'

          - pwsh: |
              # Deploy the main infrastructure
              
              Deploy/DeployInfrastructure.ps1 -BOT_NAME $(BotName) -BOT_REGIONS $(BotRegions) -BOT_GLOBAL_REGION $(BotGlobalLocation) -AUTOAPPROVE $True

              # $Lastexitcode $True -> Success, we have to change it to 0
              exit -not $LASTEXITCODE
            displayName: 'Update Main Infrastructure'

          - pwsh: |
              # Import SSL Certificate
              
              Deploy/CreateOrImportSSL.ps1 -YOUR_DOMAIN $(Domain) -PFX_FILE_LOCATION $(sslCertificate.secureFilePath) -PFX_FILE_PASSWORD $(PFXImportPassword) -AUTOAPPROVE $True -RERUN $True -FORCE $True

              # $Lastexitcode $True -> Success, we have to change it to 0
              exit -not $LASTEXITCODE
            displayName: 'Import SSL Certificate'
          - pwsh: |
              # Az logout
              az logout
              
              # Clear ENV Variables
              # Terraform
              $env:ARM_CLIENT_ID=""
              $env:ARM_CLIENT_SECRET=""
              $env:ARM_SUBSCRIPTION_ID=""
              $env:ARM_TENANT_ID=""
            failOnStderr: true
            displayName: 'Az Logout'
            condition: always()

- stage: LUIS
  displayName: 'Deploy LUIS and Bot' 
  #dependsOn: string | [ string ]
  #condition: string
  jobs:
  - deployment: LUIS
    displayName: 'Deploying LUIS Application'
    pool:
      name: Default
      demands:
      - docker
    container: geobotagent
    environment: Prod
    strategy: 
      runOnce:
        deploy:
          steps:
          - checkout: self
          - pwsh: |
              # Azure Login
              az login --service-principal --username $(ServicePrincipalID) --password $(ServicePrincipalSecret) --tenant $(TenantId)
              
              # Terraform
              Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID]$(ServicePrincipalID)"
              Write-Host "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$(ServicePrincipalSecret)"
              Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(SubscriptionId)"
              Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID]$(TenantId)"
            displayName: 'Prepare Azure connection for CLI & Terraform'  

          - pwsh: |
              # Initialize Terraform Folders
              
              Deploy/InitTerraform.ps1 -STORAGE_ACCOUNT_NAME $(TFStateStA) -RESOURCE_GROUP_NAME $(TFStateRG) -LOCATION $(TFStateLoc) -TERRAFORM_FOLDERS @("IaC")
              
              # $Lastexitcode $True -> Success, we have to change it to 0
              exit -not $LASTEXITCODE
            displayName: 'Init Terraform Folder'

          - pwsh: |
              # Deploy / Update LUIS App 
              
              Deploy/DeployLUIS.ps1

              # $Lastexitcode $True -> Success, we have to change it to 0
              exit -not $LASTEXITCODE
            displayName: 'Deploy / Update LUIS App'

          - pwsh: |
              # Az logout
              az logout
              
              # Clear ENV Variables
              # Terraform
              $env:ARM_CLIENT_ID=""
              $env:ARM_CLIENT_SECRET=""
              $env:ARM_SUBSCRIPTION_ID=""
              $env:ARM_TENANT_ID=""
            failOnStderr: true
            displayName: 'Az Logout'
            condition: always()

- stage: Bot
  displayName: 'Deploy Bot' 
  dependsOn: LUIS
  #condition: string
  jobs:
  - deployment: BOT
    displayName: 'Deploying Bot .NET Core'
    pool:
      name: Default
      demands:
      - docker
    container: geobotagent
    environment: Prod
    strategy: 
      runOnce:
        deploy:
          steps:
          - checkout: self
          - pwsh: |
              # Azure Login
              az login --service-principal --username $(ServicePrincipalID) --password $(ServicePrincipalSecret) --tenant $(TenantId)
              
              # Terraform
              Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID]$(ServicePrincipalID)"
              Write-Host "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$(ServicePrincipalSecret)"
              Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(SubscriptionId)"
              Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID]$(TenantId)"
            displayName: 'Prepare Azure connection for CLI & Terraform'  
          
          - pwsh: |
              # Initialize Terraform Folders
              
              Deploy/InitTerraform.ps1 -STORAGE_ACCOUNT_NAME $(TFStateStA) -RESOURCE_GROUP_NAME $(TFStateRG) -LOCATION $(TFStateLoc) -TERRAFORM_FOLDERS @("IaC")
              
              # $Lastexitcode $True -> Success, we have to change it to 0
              exit -not $LASTEXITCODE
            displayName: 'Init Terraform Folder'

          - pwsh: |
              # Deploy / Update Bot App 
              
              Deploy/DeployBot.ps1

              # $Lastexitcode $True -> Success, we have to change it to 0
              exit -not $LASTEXITCODE
            displayName: 'Deploy Application'
            
          - pwsh: |
              # Az logout
              az logout
              
              # Clear ENV Variables
              # Terraform
              $env:ARM_CLIENT_ID=""
              $env:ARM_CLIENT_SECRET=""
              $env:ARM_SUBSCRIPTION_ID=""
              $env:ARM_TENANT_ID=""
            failOnStderr: true
            displayName: 'Az Logout'
            condition: always()

- stage: Destroy
  displayName: 'Destroy Infrastructure' 
  dependsOn: [] 
  condition: False
  variables:
  # This group must include following variables: 
  # - BotName (Name of the Bot)
  # - Domain (Custom Domain name for the Bot)
  # - BotRegions (Azure Regions for the Bot PowerShell Array format)
  # - BotGlobalLocation (Azure Regions for global resources)
  # - PFXImportPassword (PFX file import password for SSL Bot Certificate)
  - group: BotConfig

  jobs:
  - deployment: Destroy
    displayName: 'Destroy Infrastructure'
    pool:
      name: Default
      demands:
      - docker
    container: geobotagent
    environment: Prod
    strategy: 
      runOnce:
        deploy:
          steps:
          - checkout: self

          - pwsh: |
              # Azure Login
              az login --service-principal --username $(ServicePrincipalID) --password $(ServicePrincipalSecret) --tenant $(TenantId)
              
              # Terraform
              Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID]$(ServicePrincipalID)"
              Write-Host "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$(ServicePrincipalSecret)"
              Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(SubscriptionId)"
              Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID]$(TenantId)"
            displayName: 'Prepare Azure connection for CLI & Terraform'

          - pwsh: |
              # Initialize Terraform Folders
              
              Deploy/InitTerraform.ps1 -STORAGE_ACCOUNT_NAME $(TFStateStA) -RESOURCE_GROUP_NAME $(TFStateRG) -LOCATION $(TFStateLoc) -TERRAFORM_FOLDERS @("IaC", "SSLActivation")
              
              # $Lastexitcode $True -> Success, we have to change it to 0
              exit -not $LASTEXITCODE
            displayName: 'Init Terraform Folders'

          - pwsh: |
              # Delete State Store and Infrastructure
              
              Deploy/OneClickDestroy.ps1 -BOT_NAME $(BotName) -BOT_REGIONS $(BotRegions) -BOT_GLOBAL_REGION $(BotGlobalLocation) -AUTOAPPROVE $True

              # $Lastexitcode $True -> Success, we have to change it to 0
              exit -not $LASTEXITCODE
            displayName: 'Delete Everything'

          - pwsh: |
              # Az logout
              az logout
              
              # Clear ENV Variables
              # Terraform
              $env:ARM_CLIENT_ID=""
              $env:ARM_CLIENT_SECRET=""
              $env:ARM_SUBSCRIPTION_ID=""
              $env:ARM_TENANT_ID=""
            failOnStderr: true
            displayName: 'Az Logout'
            condition: always()